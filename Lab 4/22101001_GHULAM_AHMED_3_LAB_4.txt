# This file is a general .xdc for the Basys3 rev B board 
# To use it in a project: 
# - uncomment the lines corresponding to used pins 
# - rename the used ports (in each line, after get_ports) according to the top level signal names in the project 

# Clock signal 
set_property PACKAGE_PIN W5 [get_ports clk]  	 	 	 	  
 	set_property IOSTANDARD LVCMOS33 [get_ports clk]
create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk] 

# Switches 
#set_property PACKAGE_PIN V17 [get_ports {b[0]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[0]}] 
#set_property PACKAGE_PIN V16 [get_ports {b[1]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[1]}] 
#set_property PACKAGE_PIN W16 [get_ports {b[2]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[2]}] 
#set_property PACKAGE_PIN W17 [get_ports {b[3]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[3]}] 
#set_property PACKAGE_PIN W15 [get_ports {b[4]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[4]}] 
#set_property PACKAGE_PIN V15 [get_ports {b[5]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[5]}] 
#set_property PACKAGE_PIN W14 [get_ports {b[6]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[6]}] 
#set_property PACKAGE_PIN W13 [get_ports {b[7]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {b[7]}] 
#set_property PACKAGE_PIN V2 [get_ports {a[0]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[0]}] 
#set_property PACKAGE_PIN T3 [get_ports {a[1]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[1]}] 
#set_property PACKAGE_PIN T2 [get_ports {a[2]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[2]}] 
#set_property PACKAGE_PIN R3 [get_ports {a[3]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[3]}] 
#set_property PACKAGE_PIN W2 [get_ports {a[4]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[4]}] 
#set_property PACKAGE_PIN U1 [get_ports {a[5]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[5]}] 
#set_property PACKAGE_PIN T1 [get_ports {a[6]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[6]}] 
#set_property PACKAGE_PIN R2 [get_ports {a[7]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {a[7]}] 
  
# LEDs 
#set_property PACKAGE_PIN U16 [get_ports {led[0]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[0]}] 
#set_property PACKAGE_PIN E19 [get_ports {led[1]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[1]}] 
#set_property PACKAGE_PIN U19 [get_ports {led[2]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[2]}] 
#set_property PACKAGE_PIN V19 [get_ports {led[3]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[3]}] 
#set_property PACKAGE_PIN W18 [get_ports {led[4]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[4]}] 
#set_property PACKAGE_PIN U15 [get_ports {led[5]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[5]}] 
#set_property PACKAGE_PIN U14 [get_ports {led[6]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[6]}] 
#set_property PACKAGE_PIN V14 [get_ports {led[7]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[7]}] 
#set_property PACKAGE_PIN V13 [get_ports {led[8]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[8]}] 
#set_property PACKAGE_PIN V3 [get_ports {led[9]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[9]}] 
#set_property PACKAGE_PIN W3 [get_ports {led[10]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[10]}] 
#set_property PACKAGE_PIN U3 [get_ports {led[11]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[11]}] 
#set_property PACKAGE_PIN P3 [get_ports {led[12]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[12]}] 
#set_property PACKAGE_PIN N3 [get_ports {led[13]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[13]}] 
#set_property PACKAGE_PIN P1 [get_ports {led[14]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[14]}] 
#set_property PACKAGE_PIN L1 [get_ports {led[15]}]  	 	 	 	  			
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[15]}] 
 	 
 	 
#7 segment display 
set_property PACKAGE_PIN W7 [get_ports {seg[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[0]}] 
set_property PACKAGE_PIN W6 [get_ports {seg[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[1]}] 
set_property PACKAGE_PIN U8 [get_ports {seg[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[2]}] 
set_property PACKAGE_PIN V8 [get_ports {seg[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[3]}] 
set_property PACKAGE_PIN U5 [get_ports {seg[4]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[4]}] 
set_property PACKAGE_PIN V5 [get_ports {seg[5]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[5]}] 
set_property PACKAGE_PIN U7 [get_ports {seg[6]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[6]}] 
set_property PACKAGE_PIN V7 [get_ports dp]  	 	 	 	  
 	set_property IOSTANDARD LVCMOS33 [get_ports dp] 
set_property PACKAGE_PIN U2 [get_ports {an[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}] 
set_property PACKAGE_PIN U4 [get_ports {an[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}] 
set_property PACKAGE_PIN V4 [get_ports {an[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}] 
set_property PACKAGE_PIN W4 [get_ports {an[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}] 

#Buttons 
set_property PACKAGE_PIN U18 [get_ports reset]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports reset] 
#set_property PACKAGE_PIN T18 [get_ports btnU]  	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports btnU] 
#set_property PACKAGE_PIN W19 [get_ports reset]  	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports reset] 
set_property PACKAGE_PIN T17 [get_ports step]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports step] 
#set_property PACKAGE_PIN U17 [get_ports btnD]  	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports btnD] 
  
##Pmod Header JA 
##Sch name = JA1 
#set_property PACKAGE_PIN J1 [get_ports {JA[0]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[0]}] 
##Sch name = JA2 
#set_property PACKAGE_PIN L2 [get_ports {JA[1]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[1]}] 
##Sch name = JA3 
#set_property PACKAGE_PIN J2 [get_ports {JA[2]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[2]}] 
##Sch name = JA4 
#set_property PACKAGE_PIN G2 [get_ports {JA[3]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[3]}] 
##Sch name = JA7 
#set_property PACKAGE_PIN H1 [get_ports {JA[4]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[4]}] 
##Sch name = JA8 
#set_property PACKAGE_PIN K2 [get_ports {JA[5]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[5]}] 
##Sch name = JA9 
#set_property PACKAGE_PIN H2 [get_ports {JA[6]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[6]}] 
##Sch name = JA10 
#set_property PACKAGE_PIN G3 [get_ports {JA[7]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[7]}] 
##Pmod Header JB 
##Sch name = JB1 
#set_property PACKAGE_PIN A14 [get_ports {JB[0]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[0]}] 
##Sch name = JB2 
#set_property PACKAGE_PIN A16 [get_ports {JB[1]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[1]}] 
##Sch name = JB3 
#set_property PACKAGE_PIN B15 [get_ports {JB[2]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[2]}] ##Sch name = JB4 
#set_property PACKAGE_PIN B16 [get_ports {JB[3]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[3]}] 
##Sch name = JB7 
#set_property PACKAGE_PIN A15 [get_ports {JB[4]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[4]}] 
##Sch name = JB8 
#set_property PACKAGE_PIN A17 [get_ports {JB[5]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[5]}] 
##Sch name = JB9 
#set_property PACKAGE_PIN C15 [get_ports {JB[6]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[6]}] 
##Sch name = JB10  
#set_property PACKAGE_PIN C16 [get_ports {JB[7]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[7]}] 
  
##Pmod Header JC 
##Sch name = JC1 
#set_property PACKAGE_PIN K17 [get_ports {JC[0]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[0]}] 
##Sch name = JC2 
#set_property PACKAGE_PIN M18 [get_ports {JC[1]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[1]}] 
##Sch name = JC3 
#set_property PACKAGE_PIN N17 [get_ports {JC[2]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[2]}] 
##Sch name = JC4 
#set_property PACKAGE_PIN P18 [get_ports {JC[3]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[3]}] 
##Sch name = JC7 
#set_property PACKAGE_PIN L17 [get_ports {JC[4]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[4]}] 
##Sch name = JC8 
#set_property PACKAGE_PIN M19 [get_ports {JC[5]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[5]}] 
##Sch name = JC9 
#set_property PACKAGE_PIN P17 [get_ports {JC[6]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[6]}] 
##Sch name = JC10 
#set_property PACKAGE_PIN R18 [get_ports {JC[7]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[7]}] 

##Pmod Header JXADC 
##Sch name = XA1_P 
#set_property PACKAGE_PIN J3 [get_ports {JXADC[0]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[0]}] 
##Sch name = XA2_P 
#set_property PACKAGE_PIN L3 [get_ports {JXADC[1]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[1]}] 
##Sch name = XA3_P 
#set_property PACKAGE_PIN M2 [get_ports {JXADC[2]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[2]}] 
##Sch name = XA4_P 
#set_property PACKAGE_PIN N2 [get_ports {JXADC[3]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[3]}] 
##Sch name = XA1_N 
#set_property PACKAGE_PIN K3 [get_ports {JXADC[4]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[4]}] 
##Sch name = XA2_N 
#set_property PACKAGE_PIN M3 [get_ports {JXADC[5]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[5]}] 
##Sch name = XA3_N 
#set_property PACKAGE_PIN M1 [get_ports {JXADC[6]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[6]}] 
##Sch name = XA4_N 
#set_property PACKAGE_PIN N1 [get_ports {JXADC[7]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[7]}] 

##VGA Connector 
#set_property PACKAGE_PIN G19 [get_ports {vgaRed[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[0]}] 
#set_property PACKAGE_PIN H19 [get_ports {vgaRed[1]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[1]}] 
#set_property PACKAGE_PIN J19 [get_ports {vgaRed[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[2]}] 
#set_property PACKAGE_PIN N19 [get_ports {vgaRed[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[3]}] 
#set_property PACKAGE_PIN N18 [get_ports {vgaBlue[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[0]}] 
#set_property PACKAGE_PIN L18 [get_ports {vgaBlue[1]}] 	 	 	 	  		
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[1]}] 
#set_property PACKAGE_PIN K18 [get_ports {vgaBlue[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[2]}] 
#set_property PACKAGE_PIN J18 [get_ports {vgaBlue[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[3]}] 
#set_property PACKAGE_PIN J17 [get_ports {vgaGreen[0]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[0]}] 
#set_property PACKAGE_PIN H17 [get_ports {vgaGreen[1]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[1]}] 
#set_property PACKAGE_PIN G17 [get_ports {vgaGreen[2]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[2]}] 
#set_property PACKAGE_PIN D17 [get_ports {vgaGreen[3]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[3]}] 
#set_property PACKAGE_PIN P19 [get_ports Hsync] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports Hsync] 
#set_property PACKAGE_PIN R19 [get_ports Vsync] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports Vsync] 

##USB-RS232 Interface 
#set_property PACKAGE_PIN B18 [get_ports RsRx] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports RsRx] 
#set_property PACKAGE_PIN A18 [get_ports RsTx] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports RsTx] 

##USB HID (PS/2) 
#set_property PACKAGE_PIN C17 [get_ports PS2Clk] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Clk] 
 	#set_property PULLUP true [get_ports PS2Clk] 
#set_property PACKAGE_PIN B17 [get_ports PS2Data]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Data] 	 
 	#set_property PULLUP true [get_ports PS2Data] 

##Quad SPI Flash 
##Note that CCLK_0 cannot be placed in 7 series devices. You can access it using the 
##STARTUPE2 primitive. 
#set_property PACKAGE_PIN D18 [get_ports {QspiDB[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[0]}] 
#set_property PACKAGE_PIN D19 [get_ports {QspiDB[1]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[1]}] 
#set_property PACKAGE_PIN G18 [get_ports {QspiDB[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[2]}] 
#set_property PACKAGE_PIN F18 [get_ports {QspiDB[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[3]}] 
#set_property PACKAGE_PIN K19 [get_ports QspiCSn]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports QspiCSn] 
 
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/28/2023 10:39:11 PM
// Design Name: 
// Module Name: MIPS_Processor_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module MIPS_Processor_tb();
    logic clk, reset;
    logic [31:0] writedata, dataadr, pc, instr, readdata;
    logic memwrite;

    MIPS_Processor processor (
        .clk(clk),
        .reset(reset),
        .writedata(writedata),
        .dataadr(dataadr),
        .pc(pc),
        .instr(instr),
        .readdata(readdata),
        .memwrite(memwrite)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        reset = 1;       
        #10 reset = 0;
        #200 $finish;
    end

endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/01/2023 03:40:24 PM
// Design Name: 
// Module Name: BASYS_Processor
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module BASYS_Processor(
    input logic clk, reset, step,
    output logic dp, 
    output logic [3:0] an,
    output logic [6:0] seg);
    
    // Wires
    logic debouncedStep;
    logic [31:0] writedata, dataadr, pc, instr, readdata;
    logic [3:0] in3, in2, in1, in0;
    logic memwrite;
    
    debouncer d(clk, reset, step, debouncedStep);
    
    MIPS_Processor processor (
        .clk(debouncedStep),
        .reset(reset),
        .writedata(writedata),
        .dataadr(dataadr),
        .pc(pc),
        .instr(instr),
        .readdata(readdata),
        .memwrite(memwrite)
    );
    
    assign in3 = pc[7:4];
    assign in2 = pc[3:0];
    assign in1 = dataadr[7:4];
    assign in0 = dataadr[3:0];
    
    display_controller dc (clk, in3, in2, in1, in0, seg, dp, an);
        
endmodule

module debouncer(input logic clk, reset, sin,
    output logic sout);

    typedef enum logic [1:0] {S0, S1, S2} statetype;
    statetype [1:0] state, nextstate;
    
    //State register
    always_ff @(posedge clk, posedge reset) begin
        if (reset) state <= S0;
        else state <= nextstate;
    end
    
    //Next state logic
    always_comb
        case (state)
            S0: if (sin) nextstate <= S1;
                else nextstate <= S0; 
            S1: if (sin) nextstate <= S2;
                else nextstate <= S0;
            S2: if (sin) nextstate <= S2;
                else nextstate <= S0;
            default: nextstate <= S0;
        endcase
    
    //Output logic
    assign sout = (state == S1);
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/28/2023 10:29:53 PM
// Design Name: 
// Module Name: MIPS_Processor
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module MIPS_Processor(input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] pc, instr, readdata,           
	     output  logic       memwrite);    

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule



// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule



// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output


module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
            // Test rol
            8'h00: instr = 32'h2008a0a0;  	
        	8'h04: instr = 32'h010048ab;  
        	8'h08: instr = 32'h21210002;  	
        	
        	// Test spc
        	8'h0c: instr = 32'h40000028; 
        	8'h10: instr = 32'h8c080028;
        	8'h14: instr = 32'h21080008;

//            // Default instructions
//        	8'h00: instr = 32'h2014fff6;  	// disassemble, by hand 
//        	8'h04: instr = 32'h20090007;  	// or with a program,
//        	8'h08: instr = 32'h22820003;  	// to find out what
//        	8'h0c: instr = 32'h01342025;  	// this program does!
//        	8'h10: instr = 32'h00822824;
//        	8'h14: instr = 32'h00a42820;
//        	8'h18: instr = 32'h1045003d;
//        	8'h1c: instr = 32'h0054202a;
//        	8'h20: instr = 32'h10040001;
//        	8'h24: instr = 32'h00002820;
//        	8'h28: instr = 32'h0289202a;
//        	8'h2c: instr = 32'h00853820;
//        	8'h30: instr = 32'h00e23822;
//        	8'h34: instr = 32'hac470057;
//        	8'h38: instr = 32'h8c020050;
//        	8'h3c: instr = 32'h08000011;
//        	8'h40: instr = 32'h20020001;
//        	8'h44: instr = 32'h2282005a;
//        	8'h48: instr = 32'h08000012;  // j 48, so it will loop here

	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// single-cycle MIPS processor, with controller and datapath

module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, rol, writesrc;
  logic [2:0]  alucontrol;

  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc,
                        alusrc, regdst, regwrite, jump, rol, writesrc, alucontrol);

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump, rol, writesrc,
                          alucontrol, zero, pc, instr, aluout, writedata, readdata);

endmodule
module controller(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump, rol, writesrc,
                  output logic[2:0] alucontrol);

   logic [1:0] aluop;
   logic       branch;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
		 jump, writesrc, aluop);

   aludec  ad (funct, aluop, alucontrol, rol);

   assign pcsrc = branch & zero;

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump, writesrc,
	              output logic[1:0] aluop );
   logic [9:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg, aluop, jump, writesrc} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 10'b1100001000; // R-type
      6'b100011: controls <= 10'b1010010000; // LW
      6'b101011: controls <= 10'b0010100000; // SW
      6'b000100: controls <= 10'b0001000100; // BEQ
      6'b001000: controls <= 10'b1010000000; // ADDI
      6'b000010: controls <= 10'b0000000010; // J
      6'b010000: controls <= 10'b0010100001; // SPC
      default:   controls <= 10'bxxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol,
               output   logic      rol);
  always_comb
    case(aluop)
      2'b00: begin
        alucontrol  = 3'b010;  // add  (for lw/sw/addi)
        rol = 1'b0;
      end
      2'b01: begin
        alucontrol  = 3'b110;  // sub   (for beq)
        rol = 1'b0;
      end
      default: case(funct)          // R-TYPE instructions
          6'b100000: begin
            alucontrol  = 3'b010; // ADD
            rol = 1'b0;
          end
          6'b100010: begin
            alucontrol  = 3'b110; // SUB
            rol = 1'b0;
          end
          6'b100100: begin
            alucontrol  = 3'b000; // AND
            rol = 1'b0;
          end
          6'b100101: begin 
            alucontrol  = 3'b001; // OR
            rol = 1'b0;
          end
          6'b101010: begin 
            alucontrol  = 3'b111; // SLT
            rol = 1'b0;
          end
          6'b101011: begin
            alucontrol = 3'bxxx; // rol
            rol = 1'b1;
          end
          default: begin
            alucontrol  = 3'bxxx; // ???
            rol = 1'b0;
          end
        endcase
    endcase
endmodule

module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump, rol, writesrc,
		 input  logic[2:0]  alucontrol, 
                 output logic zero, 
		 output logic[31:0] pc, 
	         input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	         input  logic[31:0] readdata);

  logic [4:0]  writereg;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch;
  logic [31:0] signimm, signimmsh, srca, srcb, result, rotated, writedata1, result1;
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  mux2 #(32)  pcmux(pcnextbr, {pcplus4[31:28], 
                    instr[25:0], 2'b00}, jump, pcnext);

// register file logic
   regfile     rf (clk, regwrite, instr[25:21], instr[20:16], writereg,
                   result, srca, writedata1);

   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, writereg);
   mux2 #(32)  resmux (aluout, readdata, memtoreg, result1);
   signext         se (instr[15:0], signimm);

   // SPC
   mux2 #(32) wrdamux (writedata1, pc, writesrc, writedata);

  // ALU logic
   mux2 #(32)  srcbmux (writedata1, signimm, alusrc, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero);
   
   // ROL
   leftrotate  lr (srca, instr[10:6], rotated);
   mux2 #(32) rolmux (result1, rotated, rol, result);

endmodule


module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff@(posedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule


module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            3'b011: result = a ^ b;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
endmodule


module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

module leftrotate (input logic[31:0] a,
                   input logic[4:0] shamt,
                   output logic[31:0] b);
  assign b = (a << shamt) | (a >> (32 - shamt)); // left rotates by shamt
endmodule                  
                
// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

