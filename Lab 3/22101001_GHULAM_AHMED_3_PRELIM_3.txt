# CS224
# Recitation No 3
# Section No 3
# Ghulam Ahmed
# 22101001
# 27 / 3 / 2023

.data
    p1 : .asciiz "Enter register to be counted: "
    p2 : .asciiz "Register count in subprogram: "
    newline: .asciiz "\n"

.text
    main:
        li  $v0, 4
        la  $a0, p1
        syscall
        li  $v0, 5
        syscall

        # Validate input
        bgt $v0, 31, end
        blt $v0, 1, end

        move $a0, $v0 
        jal get_register_count
        move $s0, $v0

        li  $v0, 4
        la  $a0, p2
        syscall
        move $a0, $s0
        li  $v0, 1
        syscall
        li $v0, 4
        la $a0, newline
        syscall
        
        j main

    end:
        li $v0, 10
        syscall



    get_register_count:
        addi $sp, $sp, -32
        sw $s0, 0($sp)
        sw $s1, 4($sp)
        sw $s2, 8($sp)
        sw $s3, 12($sp)
        sw $s4, 16($sp)
        sw $s5, 20($sp)
        sw $s6, 24($sp)
        sw $ra, 28($sp)

        move $s0, $zero # Initialize count to 0
        move $s1, $a0 # Copy register to be counted

        la $s2, loop # Load loop address

    loop:
        la $s3, end_loop # Load end_loop address
        bgt $s2, $s3, finish # Check if we reached the end of the loop

        lw $s4, 0($s2) # Load instruction from memory

        andi $s5, $s4, 0xFC000000
        beq $s5, $zero, r_type
        srl $s5, $s5, 26
        beq $s5, 2, Increment
        beq $s5, 3, Increment
        j i_type

    i_type:
        andi $s6, $s4, 0x03E00000
        srl $s6, $s6, 21
        bne $s6, $s1, i_type_rt
        addi $s0, $s0, 1

    i_type_rt:
        andi $s6, $s4, 0x001F0000
        srl $s6, $s6, 16
        bne $s6, $s1, Increment
        addi $s0, $s0, 1
        j Increment

    r_type:
        andi $s6, $s4, 0x03E00000
        srl $s6, $s6, 21
        bne $s6, $s1, r_type_rt
        addi $s0, $s0, 1

    r_type_rt:
        andi $s6, $s4, 0x001F0000
        srl $s6, $s6, 16
        bne $s6, $s1, r_type_rd
        addi $s0, $s0, 1

    r_type_rd:
        andi $s6, $s4, 0x0000F800
        srl $s6, $s6, 11
        bne $s6, $s1, Increment
        addi $s0, $s0, 1

    Increment:
        addi $s2, $s2, 4
        j loop

    finish:
        move $v0, $s0

        lw $s0, 0($sp)
        lw $s1, 4($sp)
        lw $s2, 8($sp)
        lw $s3, 12($sp)
        lw $s4, 16($sp)
        lw $s5, 20($sp)
        lw $s6, 24($sp)
        lw $ra, 28($sp)
        addi $sp, $sp, 32
        jr $ra

    end_loop:

# CS224
# Recitation No 3
# Section No 3
# Ghulam Ahmed
# 22101001
# 27 / 3 / 2023

.data
    p1: .asciiz "Enter the dividend: "
    p2: .asciiz "Enter the divisor: "
    p3: .asciiz "Quotient: "
    p4: .asciiz "Remainder: "
    newline: .asciiz "\n"

.text:
    main:
        li $v0, 4
        la $a0, p1
        syscall
        li $v0, 5
        syscall
        move $s0, $v0 # s0: dividend
        
        li $v0, 4
        la $a0, p2
        syscall
        li $v0, 5 
        syscall #v0: divisor
        
        move $a0, $s0 
        move $a1, $v0 
        move $a2, $0
        jal recursive_division
        move $s0, $v0
        move $s1, $v1
        
        li $v0, 4
        la $a0, p3
        syscall
        li $v0, 1
        move $a0, $s0
        syscall
        li $v0, 4
        la $a0, newline
        syscall
        
        li $v0, 4
        la $a0, p4
        syscall
        li $v0, 1
        move $a0, $s1
        syscall
        li $v0, 4
        la $a0, newline
        syscall
        
        li $v0, 10
        syscall

    recursive_division:
        addi $sp, $sp, -4
        sw $ra, 0($sp)
        
        bgt $a0, $a1, subtract
        beq $a0, $a1, subtract
        # if dividend < divisor, return quotient and remainder
        move $v1, $a0 
        addi $sp, $sp, 4
        jr $ra        
        
        subtract:
        sub $a0, $a0, $a1
        addi $a2, $a2, 1
        jal recursive_division
        move $v0, $a2    
        lw $ra, 0($sp)
        addi $sp, $sp, 4
        jr $ra


# CS224
# Recitation No 3
# Section No 3
# Ghulam Ahmed
# 22101001
# 27 / 3 / 2023

.data  
    line: .asciiz "\n --------------------------------------"
    nodeNumberLabel: .asciiz "\n Node No.: "
	addressOfCurrentNodeLabel: .asciiz "\n Address of Current Node: "
    addressOfNextNodeLabel: .asciiz	"\n Address of Next Node: "
    dataValueOfCurrentNode: .asciiz	"\n Data Value of Current Node: "
    p1: .asciiz "\n Enter the size of the linked list: "
    p2: .asciiz "\n Enter the value to be excluded: "
    p3: .asciiz "\n The linked list after excluding the value: "
    p4: .asciiz "\n The linked list before excluding the value: "


.text
    main: 
        li  $v0, 4
        la  $a0, p1
        syscall
        li  $v0, 5
        syscall
        move $s0, $v0 # $s0: stores the size of the linked list.

        move $a0, $s0
        jal createLinkedList
        move $s1, $v0 # $s1: points to the head of the linked list.

        li $v0, 4
        la $a0, p4
        syscall
        move $a0, $s1
        jal printLinkedList

        li $v0, 4
        la $a0, p2
        syscall
        li $v0, 5
        syscall
        move $s2, $v0 # $s2: stores the value to be excluded.

        move $a0, $s1
        move $a1, $s2
        jal copyAllExcept_x
        move $s3, $v0 # $s3: points to the head of the new list.

        li $v0, 4
        la $a0, p3
        syscall
        move $a0, $s3
        jal printLinkedList

        li $v0, 10
        syscall

    createLinkedList:
        # $a0: No. of nodes to be created ($a0 >= 1)
        # $v0: returns list head
        # Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
        # By 4*i inserting a data value like this
        # when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
            addi	$sp, $sp, -24
            sw	$s0, 20($sp)
            sw	$s1, 16($sp)
            sw	$s2, 12($sp)
            sw	$s3, 8($sp)
            sw	$s4, 4($sp)
            sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
            
            move	$s0, $a0	# $s0: no. of nodes to be created.
            li	$s1, 1		# $s1: Node counter
        # Create the first node: header.
        # Each node is 8 bytes: link field then data field.
            li	$a0, 8
            li	$v0, 9
            syscall
        # OK now we have the list head. Save list head pointer 
            move	$s2, $v0	# $s2 points to the first and last node of the linked list.
            move	$s3, $v0	# $s3 now points to the list head.
            sll	$s4, $s1, 2	
        # sll: So that node 1 data value will be 4, node i data value will be 4*i
            sw	$s4, 4($s2)	# Store the data value.
            
        addNode:
        # Are we done?
        # No. of nodes created compared with the number of nodes to be created.
            beq	$s1, $s0, allDone
            addi	$s1, $s1, 1	# Increment node counter.
            li	$a0, 8 		# Remember: Node size is 8 bytes.
            li	$v0, 9
            syscall
        # Connect the this node to the lst node pointed by $s2.
            sw	$v0, 0($s2)
        # Now make $s2 pointing to the newly created node.
            move	$s2, $v0	# $s2 now points to the new node.
            sll	$s4, $s1, 2	
        # sll: So that node 1 data value will be 4, node i data value will be 4*i
            sw	$s4, 4($s2)	# Store the data value.
            j	addNode
        allDone:
        # Make sure that the link field of the last node cotains 0.
        # The last node is pointed by $s2.
            sw	$zero, 0($s2)
            move	$v0, $s3	# Now $v0 points to the list head ($s3).
            
        # Restore the register values
            lw	$ra, 0($sp)
            lw	$s4, 4($sp)
            lw	$s3, 8($sp)
            lw	$s2, 12($sp)
            lw	$s1, 16($sp)
            lw	$s0, 20($sp)
            addi	$sp, $sp, 24
            
            jr	$ra

    printLinkedList:
        # Print linked list nodes in the following format
        # --------------------------------------
        # Node No: xxxx (dec)
        # Address of Current Node: xxxx (hex)
        # Address of Next Node: xxxx (hex)
        # Data Value of Current Node: xxx (dec)
        # --------------------------------------

        # Save $s registers used
            addi	$sp, $sp, -20
            sw	$s0, 16($sp)
            sw	$s1, 12($sp)
            sw	$s2, 8($sp)
            sw	$s3, 4($sp)
            sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

        # $a0: points to the linked list.
        # $s0: Address of current
        # s1: Address of next
        # $2: Data of current
        # $s3: Node counter: 1, 2, ...
            move $s0, $a0	# $s0: points to the current node.
            li   $s3, 0
        printNextNode:
            beq	$s0, $zero, printedAll
                        # $s0: Address of current node
            lw	$s1, 0($s0)	# $s1: Address of  next node
            lw	$s2, 4($s0)	# $s2: Data of current node
            addi	$s3, $s3, 1
        # $s0: address of current node: print in hex.
        # $s1: address of next node: print in hex.
        # $s2: data field value of current node: print in decimal.
            la	$a0, line
            li	$v0, 4
            syscall		# Print line seperator
            
            la	$a0, nodeNumberLabel
            li	$v0, 4
            syscall
            
            move	$a0, $s3	# $s3: Node number (position) of current node
            li	$v0, 1
            syscall
            
            la	$a0, addressOfCurrentNodeLabel
            li	$v0, 4
            syscall
            
            move	$a0, $s0	# $s0: Address of current node
            li	$v0, 34
            syscall

            la	$a0, addressOfNextNodeLabel
            li	$v0, 4
            syscall
            move	$a0, $s1	# $s0: Address of next node
            li	$v0, 34
            syscall	
            
            la	$a0, dataValueOfCurrentNode
            li	$v0, 4
            syscall
                
            move	$a0, $s2	# $s2: Data of current node
            li	$v0, 1		
            syscall	

        # Now consider next node.
            move	$s0, $s1	# Consider next node.
            j	printNextNode
        printedAll:
        # Restore the register values
            lw	$ra, 0($sp)
            lw	$s3, 4($sp)
            lw	$s2, 8($sp)
            lw	$s1, 12($sp)
            lw	$s0, 16($sp)
            addi	$sp, $sp, 20
            jr	$ra

    copyAllExcept_x:
        addi $sp, $sp, -28
        sw $s0, 24($sp)
        sw $s1, 20($sp)
        sw $s2, 16($sp)
        sw $s3, 12($sp)
        sw $s4, 8($sp)
        sw $s5, 4($sp)
        sw $ra, 0($sp)

        move $s0, $a0 # $s0: points to the linked list.
        move $s1, $a1 # $s1: the value to be excluded.

        li $a0, 8
        li $v0, 9
        syscall

        move $s2, $v0 # $s2: points at current node.
        move $s3, $v0 # $s3: stores the head of the new list.


        copyLinkedList:
            beq $s0, $zero, copyEnd
            lw $s4, 0($s0) # $s4: subsequent node of the linked list.
            lw $s5, 4($s0) # $s5: current node's data
            beq $s5, $s1, exclude

            li $a0, 8
            li $v0, 9
            syscall
            
            sw $v0, 0($s2)
            move $s2, $v0
            sw $s5, 4($s2)

        exclude: 
            move $s0, $s4
            j copyLinkedList
        
        copyEnd:
            lw $s3, 0($s3)
            move $v0, $s3

            lw $ra, 0($sp)
            lw $s5, 4($sp)
            lw $s4, 8($sp)
            lw $s3, 12($sp)
            lw $s2, 16($sp)
            lw $s1, 20($sp)
            lw $s0, 24($sp)
            addi $sp, $sp, 28
            jr $ra